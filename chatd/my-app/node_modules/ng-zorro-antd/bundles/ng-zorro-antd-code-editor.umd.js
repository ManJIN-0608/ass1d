(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('ng-zorro-antd/core'), require('@angular/common'), require('ng-zorro-antd/icon'), require('ng-zorro-antd/spin')) :
    typeof define === 'function' && define.amd ? define('ng-zorro-antd/code-editor', ['exports', '@angular/core', '@angular/forms', 'rxjs', 'rxjs/operators', 'ng-zorro-antd/core', '@angular/common', 'ng-zorro-antd/icon', 'ng-zorro-antd/spin'], factory) :
    (global = global || self, factory((global['ng-zorro-antd'] = global['ng-zorro-antd'] || {}, global['ng-zorro-antd']['code-editor'] = {}), global.ng.core, global.ng.forms, global.rxjs, global.rxjs.operators, global['ng-zorro-antd'].core, global.ng.common, global['ng-zorro-antd'].icon, global['ng-zorro-antd'].spin));
}(this, function (exports, core, forms, rxjs, operators, core$1, common, icon, spin) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var NzCodeEditorLoadingStatus = {
        UNLOAD: 'unload',
        LOADING: 'loading',
        LOADED: 'LOADED',
    };
    /** @type {?} */
    var NZ_CODE_EDITOR_CONFIG = new core.InjectionToken('nz-code-editor-config', {
        providedIn: 'root',
        factory: NZ_CODE_EDITOR_CONFIG_FACTORY
    });
    /**
     * @return {?}
     */
    function NZ_CODE_EDITOR_CONFIG_FACTORY() {
        return {};
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable no-any
    /**
     * @param {?=} fn
     * @return {?}
     */
    function tryTriggerFunc(fn) {
        return (/**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (fn) {
                fn.apply(void 0, __spread(args));
            }
        });
    }
    // tslint:enable no-any
    var NzCodeEditorService = /** @class */ (function () {
        function NzCodeEditorService(config, _document // tslint:disable-line no-any
        ) {
            this.config = config;
            this.firstEditorInitialized = false;
            this.loaded$ = new rxjs.Subject();
            this.loadingStatus = NzCodeEditorLoadingStatus.UNLOAD;
            this.option$ = new rxjs.BehaviorSubject(this.option);
            this.document = _document;
            this.option = this.config.defaultEditorOption || {};
        }
        // TODO: use config service later.
        // TODO: use config service later.
        /**
         * @param {?} option
         * @return {?}
         */
        NzCodeEditorService.prototype.updateDefaultOption = 
        // TODO: use config service later.
        /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            this.option = __assign({}, this.option, option);
            this.option$.next(this.option);
            if (option.theme) {
                monaco.editor.setTheme(option.theme);
            }
        };
        /**
         * @return {?}
         */
        NzCodeEditorService.prototype.requestToInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.loadingStatus === NzCodeEditorLoadingStatus.LOADED) {
                this.onInit();
                return rxjs.of(this.getLatestOption());
            }
            if (this.loadingStatus === NzCodeEditorLoadingStatus.UNLOAD) {
                this.loadMonacoScript();
            }
            return this.loaded$.asObservable().pipe(operators.tap((/**
             * @return {?}
             */
            function () { return _this.onInit(); })), operators.map((/**
             * @return {?}
             */
            function () { return _this.getLatestOption(); })));
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorService.prototype.loadMonacoScript = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.loadingStatus === NzCodeEditorLoadingStatus.LOADING) {
                return;
            }
            this.loadingStatus = NzCodeEditorLoadingStatus.LOADING;
            /** @type {?} */
            var assetsRoot = this.config.assetsRoot;
            /** @type {?} */
            var vs = assetsRoot ? assetsRoot + "/vs" : 'assets/vs';
            /** @type {?} */
            var windowAsAny = (/** @type {?} */ (window));
            // tslint:disable-line no-any
            /** @type {?} */
            var loadScript = this.document.createElement('script');
            loadScript.type = 'text/javascript';
            loadScript.src = vs + "/loader.js";
            loadScript.onload = (/**
             * @return {?}
             */
            function () {
                windowAsAny.require.config({
                    paths: { vs: vs }
                });
                windowAsAny.require(['vs/editor/editor.main'], (/**
                 * @return {?}
                 */
                function () {
                    _this.loadingStatus = NzCodeEditorLoadingStatus.LOADED;
                    _this.loaded$.next(true);
                    _this.loaded$.complete();
                    _this.onLoad();
                }));
            });
            loadScript.onerror = (/**
             * @return {?}
             */
            function () {
                throw new Error(core$1.PREFIX + " cannot load assets of monaco editor from source \"" + vs + "\".");
            });
            this.document.documentElement.appendChild(loadScript);
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorService.prototype.onInit = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.firstEditorInitialized) {
                this.firstEditorInitialized = true;
                tryTriggerFunc(this.config.onFirstEditorInit)();
            }
            tryTriggerFunc(this.config.onInit)();
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorService.prototype.onLoad = /**
         * @private
         * @return {?}
         */
        function () {
            tryTriggerFunc(this.config.onLoad)();
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorService.prototype.getLatestOption = /**
         * @private
         * @return {?}
         */
        function () {
            return __assign({}, this.option);
        };
        NzCodeEditorService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NzCodeEditorService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NZ_CODE_EDITOR_CONFIG,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        /** @nocollapse */ NzCodeEditorService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NzCodeEditorService_Factory() { return new NzCodeEditorService(core.ɵɵinject(NZ_CODE_EDITOR_CONFIG), core.ɵɵinject(common.DOCUMENT)); }, token: NzCodeEditorService, providedIn: "root" });
        return NzCodeEditorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:enable no-any
    var NzCodeEditorComponent = /** @class */ (function () {
        function NzCodeEditorComponent(nzCodeEditorService, ngZone, elementRef) {
            this.nzCodeEditorService = nzCodeEditorService;
            this.ngZone = ngZone;
            this.nzEditorMode = 'normal';
            this.nzOriginalText = '';
            this.nzLoading = false;
            this.nzFullControl = false;
            this.nzEditorInitialized = new core.EventEmitter();
            this.editorOptionCached = {};
            this.destroy$ = new rxjs.Subject();
            this.resize$ = new rxjs.Subject();
            this.editorOption$ = new rxjs.BehaviorSubject({});
            this.value = '';
            this.modelSet = false;
            this.el = elementRef.nativeElement;
        }
        Object.defineProperty(NzCodeEditorComponent.prototype, "nzEditorOption", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.editorOption$.next(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Initialize a monaco editor instance.
         */
        /**
         * Initialize a monaco editor instance.
         * @return {?}
         */
        NzCodeEditorComponent.prototype.ngAfterViewInit = /**
         * Initialize a monaco editor instance.
         * @return {?}
         */
        function () {
            var _this = this;
            this.nzCodeEditorService.requestToInit().subscribe((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return _this.setup(option); }));
        };
        /**
         * @return {?}
         */
        NzCodeEditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.editorInstance.dispose();
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NzCodeEditorComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
            this.setValue();
        };
        // tslint:disable-next-line no-any
        // tslint:disable-next-line no-any
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCodeEditorComponent.prototype.registerOnChange = 
        // tslint:disable-next-line no-any
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        // tslint:disable-next-line no-any
        // tslint:disable-next-line no-any
        /**
         * @param {?} fn
         * @return {?}
         */
        NzCodeEditorComponent.prototype.registerOnTouched = 
        // tslint:disable-next-line no-any
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouch = fn;
        };
        /**
         * @param {?} _value
         * @return {?}
         */
        NzCodeEditorComponent.prototype.onChange = /**
         * @param {?} _value
         * @return {?}
         */
        function (_value) { };
        /**
         * @return {?}
         */
        NzCodeEditorComponent.prototype.onTouch = /**
         * @return {?}
         */
        function () { };
        /**
         * @return {?}
         */
        NzCodeEditorComponent.prototype.layout = /**
         * @return {?}
         */
        function () {
            this.resize$.next();
        };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        NzCodeEditorComponent.prototype.setup = /**
         * @private
         * @param {?} option
         * @return {?}
         */
        function (option) {
            var _this = this;
            core$1.inNextTick().subscribe((/**
             * @return {?}
             */
            function () {
                _this.editorOptionCached = option;
                _this.registerOptionChanges();
                _this.initMonacoEditorInstance();
                _this.registerResizeChange();
                _this.setValue();
                if (!_this.nzFullControl) {
                    _this.setValueEmitter();
                }
                _this.nzEditorInitialized.next(_this.editorInstance);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.registerOptionChanges = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            rxjs.combineLatest([this.editorOption$, this.nzCodeEditorService.option$])
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), selfOpt = _b[0], defaultOpt = _b[1];
                _this.editorOptionCached = __assign({}, _this.editorOptionCached, defaultOpt, selfOpt);
                _this.updateOptionToMonaco();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.initMonacoEditorInstance = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.editorInstance =
                    _this.nzEditorMode === 'normal'
                        ? monaco.editor.create(_this.el, __assign({}, _this.editorOptionCached))
                        : monaco.editor.createDiffEditor(_this.el, __assign({}, ((/** @type {?} */ (_this.editorOptionCached)))));
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.registerResizeChange = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                rxjs.fromEvent(window, 'resize')
                    .pipe(operators.debounceTime(300), operators.takeUntil(_this.destroy$))
                    .subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.layout();
                }));
                _this.resize$
                    .pipe(operators.takeUntil(_this.destroy$), operators.filter((/**
                 * @return {?}
                 */
                function () { return !!_this.editorInstance; })), operators.map((/**
                 * @return {?}
                 */
                function () { return ({
                    width: _this.el.clientWidth,
                    height: _this.el.clientHeight
                }); })), operators.distinctUntilChanged((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.width === b.width && a.height === b.height; })), operators.debounceTime(50))
                    .subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.editorInstance.layout();
                }));
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.setValue = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.editorInstance) {
                return;
            }
            if (this.nzFullControl && this.value) {
                core$1.warn("should not set value when you are using full control mode! It would result in ambiguous data flow!");
                return;
            }
            if (this.nzEditorMode === 'normal') {
                if (this.modelSet) {
                    ((/** @type {?} */ (this.editorInstance.getModel()))).setValue(this.value);
                }
                else {
                    ((/** @type {?} */ (this.editorInstance))).setModel(monaco.editor.createModel(this.value, ((/** @type {?} */ (this.editorOptionCached))).language));
                    this.modelSet = true;
                }
            }
            else {
                if (this.modelSet) {
                    /** @type {?} */
                    var model = (/** @type {?} */ (((/** @type {?} */ (this.editorInstance))).getModel()));
                    model.modified.setValue(this.value);
                    model.original.setValue(this.nzOriginalText);
                }
                else {
                    /** @type {?} */
                    var language = ((/** @type {?} */ (this.editorOptionCached))).language;
                    ((/** @type {?} */ (this.editorInstance))).setModel({
                        original: monaco.editor.createModel(this.value, language),
                        modified: monaco.editor.createModel(this.nzOriginalText, language)
                    });
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.setValueEmitter = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var model = (/** @type {?} */ ((this.nzEditorMode === 'normal'
                ? ((/** @type {?} */ (this.editorInstance))).getModel()
                : (/** @type {?} */ (((/** @type {?} */ (this.editorInstance))).getModel())).modified)));
            model.onDidChangeContent((/**
             * @return {?}
             */
            function () {
                _this.emitValue(model.getValue());
            }));
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        NzCodeEditorComponent.prototype.emitValue = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
            this.onChange(value);
        };
        /**
         * @private
         * @return {?}
         */
        NzCodeEditorComponent.prototype.updateOptionToMonaco = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.editorInstance) {
                this.editorInstance.updateOptions(__assign({}, this.editorOptionCached));
            }
        };
        NzCodeEditorComponent.decorators = [
            { type: core.Component, args: [{
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        selector: 'nz-code-editor',
                        template: "<div class=\"ant-code-editor-loading\" *ngIf=\"nzLoading\">\n  <nz-spin></nz-spin>\n</div>\n\n<div class=\"ant-code-editor-toolkit\" *ngIf=\"nzToolkit\">\n  <ng-template [ngTemplateOutlet]=\"nzToolkit\"></ng-template>\n</div>\n",
                        host: {
                            '[class.ant-code-editor]': 'true'
                        },
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return NzCodeEditorComponent; })),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        NzCodeEditorComponent.ctorParameters = function () { return [
            { type: NzCodeEditorService },
            { type: core.NgZone },
            { type: core.ElementRef }
        ]; };
        NzCodeEditorComponent.propDecorators = {
            nzEditorMode: [{ type: core.Input }],
            nzOriginalText: [{ type: core.Input }],
            nzLoading: [{ type: core.Input }],
            nzFullControl: [{ type: core.Input }],
            nzToolkit: [{ type: core.Input }],
            nzEditorOption: [{ type: core.Input }],
            nzEditorInitialized: [{ type: core.Output }]
        };
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzCodeEditorComponent.prototype, "nzLoading", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Object)
        ], NzCodeEditorComponent.prototype, "nzFullControl", void 0);
        return NzCodeEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzCodeEditorModule = /** @class */ (function () {
        function NzCodeEditorModule() {
        }
        NzCodeEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NzCodeEditorComponent],
                        imports: [common.CommonModule, icon.NzIconModule, spin.NzSpinModule],
                        exports: [NzCodeEditorComponent]
                    },] }
        ];
        return NzCodeEditorModule;
    }());

    exports.NZ_CODE_EDITOR_CONFIG = NZ_CODE_EDITOR_CONFIG;
    exports.NZ_CODE_EDITOR_CONFIG_FACTORY = NZ_CODE_EDITOR_CONFIG_FACTORY;
    exports.NzCodeEditorComponent = NzCodeEditorComponent;
    exports.NzCodeEditorLoadingStatus = NzCodeEditorLoadingStatus;
    exports.NzCodeEditorModule = NzCodeEditorModule;
    exports.NzCodeEditorService = NzCodeEditorService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-zorro-antd-code-editor.umd.js.map
