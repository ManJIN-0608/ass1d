(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/cdk/platform'), require('ng-zorro-antd/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ng-zorro-antd/resizable', ['exports', '@angular/common', '@angular/core', '@angular/cdk/platform', 'ng-zorro-antd/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ng-zorro-antd'] = global['ng-zorro-antd'] || {}, global['ng-zorro-antd'].resizable = {}), global.ng.common, global.ng.core, global.ng.cdk.platform, global['ng-zorro-antd'].core, global.rxjs, global.rxjs.operators));
}(this, function (exports, common, core, platform, core$1, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzResizableService = /** @class */ (function () {
        function NzResizableService() {
            this.handleMouseDown$ = new rxjs.Subject();
            this.documentMouseUp$ = new rxjs.Subject();
            this.mouseEntered$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NzResizableService.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.handleMouseDown$.complete();
            this.documentMouseUp$.complete();
            this.mouseEntered$.complete();
        };
        NzResizableService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NzResizableService.ctorParameters = function () { return []; };
        return NzResizableService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzResizableDirective = /** @class */ (function () {
        function NzResizableDirective(elementRef, renderer, ngZone, nzResizableService, platform) {
            var _this = this;
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.nzResizableService = nzResizableService;
            this.platform = platform;
            this.nzBounds = 'parent';
            this.nzMinHeight = 40;
            this.nzMinWidth = 40;
            this.nzGridColumnCount = -1;
            this.nzMaxColumn = -1;
            this.nzMinColumn = -1;
            this.nzLockAspectRatio = false;
            this.nzPreview = false;
            this.nzResize = new core.EventEmitter();
            this.nzResizeEnd = new core.EventEmitter();
            this.nzResizeStart = new core.EventEmitter();
            this.resizing = false;
            this.destroy$ = new rxjs.Subject();
            this.nzResizableService.handleMouseDown$.pipe(operators.takeUntil(this.destroy$)).subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.resizing = true;
                _this.currentHandleEvent = event;
                _this.setCursor();
                _this.nzResizeStart.emit({
                    mouseEvent: event.mouseEvent
                });
                _this.elRect = _this.el.getBoundingClientRect();
            }));
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        NzResizableDirective.prototype.onMouseup = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (_this.resizing) {
                    _this.resizing = false;
                    _this.nzResizableService.documentMouseUp$.next();
                    _this.endResize($event);
                }
            }));
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzResizableDirective.prototype.onMousemove = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (_this.resizing) {
                    _this.resize($event);
                }
            }));
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.onMouseenter = /**
         * @return {?}
         */
        function () {
            this.nzResizableService.mouseEntered$.next(true);
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.onMouseleave = /**
         * @return {?}
         */
        function () {
            this.nzResizableService.mouseEntered$.next(false);
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.setPosition = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var position = getComputedStyle(this.el).position;
            if (position === 'static' || !position) {
                this.renderer.setStyle(this.el, 'position', 'relative');
            }
        };
        /**
         * @param {?} width
         * @param {?} height
         * @param {?} ratio
         * @return {?}
         */
        NzResizableDirective.prototype.calcSize = /**
         * @param {?} width
         * @param {?} height
         * @param {?} ratio
         * @return {?}
         */
        function (width, height, ratio) {
            /** @type {?} */
            var newWidth;
            /** @type {?} */
            var newHeight;
            /** @type {?} */
            var col = 0;
            /** @type {?} */
            var spanWidth = 0;
            /** @type {?} */
            var maxWidth = Infinity;
            /** @type {?} */
            var minWidth = this.nzMinWidth;
            /** @type {?} */
            var maxHeight = Infinity;
            /** @type {?} */
            var boundWidth = Infinity;
            /** @type {?} */
            var boundHeight = Infinity;
            if (this.nzBounds === 'parent') {
                /** @type {?} */
                var parent_1 = this.renderer.parentNode(this.el);
                if (parent_1 instanceof HTMLElement) {
                    /** @type {?} */
                    var parentRect = parent_1.getBoundingClientRect();
                    boundWidth = parentRect.width;
                    boundHeight = parentRect.height;
                }
            }
            else if (this.nzBounds === 'window') {
                if (typeof window !== 'undefined') {
                    boundWidth = window.innerWidth;
                    boundHeight = window.innerHeight;
                }
            }
            else if (this.nzBounds && this.nzBounds.nativeElement && this.nzBounds.nativeElement instanceof HTMLElement) {
                /** @type {?} */
                var boundsRect = this.nzBounds.nativeElement.getBoundingClientRect();
                boundWidth = boundsRect.width;
                boundHeight = boundsRect.height;
            }
            maxWidth = core$1.ensureInBounds(this.nzMaxWidth, boundWidth);
            maxHeight = core$1.ensureInBounds(this.nzMaxHeight, boundHeight);
            if (this.nzGridColumnCount !== -1) {
                spanWidth = maxWidth / this.nzGridColumnCount;
                minWidth = this.nzMinColumn !== -1 ? spanWidth * this.nzMinColumn : minWidth;
                maxWidth = this.nzMaxColumn !== -1 ? spanWidth * this.nzMaxColumn : maxWidth;
            }
            if (ratio !== -1) {
                if (/(left|right)/i.test(this.currentHandleEvent.direction)) {
                    newWidth = Math.min(Math.max(width, minWidth), maxWidth);
                    newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);
                    if (newHeight >= maxHeight || newHeight <= this.nzMinHeight) {
                        newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);
                    }
                }
                else {
                    newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);
                    newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);
                    if (newWidth >= maxWidth || newWidth <= minWidth) {
                        newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);
                    }
                }
            }
            else {
                newWidth = Math.min(Math.max(width, minWidth), maxWidth);
                newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);
            }
            if (this.nzGridColumnCount !== -1) {
                col = Math.round(newWidth / spanWidth);
                newWidth = col * spanWidth;
            }
            return {
                col: col,
                width: newWidth,
                height: newHeight
            };
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.setCursor = /**
         * @return {?}
         */
        function () {
            switch (this.currentHandleEvent.direction) {
                case 'left':
                case 'right':
                    this.renderer.setStyle(document.body, 'cursor', 'col-resize');
                    break;
                case 'top':
                case 'bottom':
                    this.renderer.setStyle(document.body, 'cursor', 'row-resize');
                    break;
                case 'topLeft':
                case 'bottomRight':
                    this.renderer.setStyle(document.body, 'cursor', 'nwse-resize');
                    break;
                case 'topRight':
                case 'bottomLeft':
                    this.renderer.setStyle(document.body, 'cursor', 'nesw-resize');
                    break;
            }
            this.renderer.setStyle(document.body, 'user-select', 'none');
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzResizableDirective.prototype.resize = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var elRect = this.elRect;
            /** @type {?} */
            var width = elRect.width;
            /** @type {?} */
            var height = elRect.height;
            /** @type {?} */
            var ratio = this.nzLockAspectRatio ? width / height : -1;
            switch (this.currentHandleEvent.direction) {
                case 'bottomRight':
                    width = $event.clientX - elRect.left;
                    height = $event.clientY - elRect.top;
                    break;
                case 'bottomLeft':
                    width = elRect.width + this.currentHandleEvent.mouseEvent.clientX - $event.clientX;
                    height = $event.clientY - elRect.top;
                    break;
                case 'topRight':
                    width = $event.clientX - elRect.left;
                    height = elRect.height + this.currentHandleEvent.mouseEvent.clientY - $event.clientY;
                    break;
                case 'topLeft':
                    width = elRect.width + this.currentHandleEvent.mouseEvent.clientX - $event.clientX;
                    height = elRect.height + this.currentHandleEvent.mouseEvent.clientY - $event.clientY;
                    break;
                case 'top':
                    height = elRect.height + this.currentHandleEvent.mouseEvent.clientY - $event.clientY;
                    break;
                case 'right':
                    width = $event.clientX - elRect.left;
                    break;
                case 'bottom':
                    height = $event.clientY - elRect.top;
                    break;
                case 'left':
                    width = elRect.width + this.currentHandleEvent.mouseEvent.clientX - $event.clientX;
            }
            /** @type {?} */
            var size = this.calcSize(width, height, ratio);
            this.sizeCache = __assign({}, size);
            this.nzResize.emit(__assign({}, size, { mouseEvent: $event }));
            if (this.nzPreview) {
                this.previewResize(size);
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzResizableDirective.prototype.endResize = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.renderer.setStyle(document.body, 'cursor', '');
            this.renderer.setStyle(document.body, 'user-select', '');
            this.removeGhostElement();
            /** @type {?} */
            var size = this.sizeCache
                ? __assign({}, this.sizeCache) : {
                width: this.elRect.width,
                height: this.elRect.height
            };
            this.nzResizeEnd.emit(__assign({}, size, { mouseEvent: $event }));
            this.sizeCache = null;
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        NzResizableDirective.prototype.previewResize = /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var width = _a.width, height = _a.height;
            this.createGhostElement();
            this.renderer.setStyle(this.ghostElement, 'width', width + "px");
            this.renderer.setStyle(this.ghostElement, 'height', height + "px");
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.createGhostElement = /**
         * @return {?}
         */
        function () {
            if (!this.ghostElement) {
                this.ghostElement = this.renderer.createElement('div');
                this.renderer.setAttribute(this.ghostElement, 'class', 'nz-resizable-preview');
            }
            this.renderer.appendChild(this.el, this.ghostElement);
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.removeGhostElement = /**
         * @return {?}
         */
        function () {
            if (this.ghostElement) {
                this.renderer.removeChild(this.el, this.ghostElement);
            }
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.platform.isBrowser) {
                this.el = this.elementRef.nativeElement;
                this.setPosition();
            }
        };
        /**
         * @return {?}
         */
        NzResizableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.ghostElement = null;
            this.sizeCache = null;
            this.destroy$.next();
            this.destroy$.complete();
        };
        NzResizableDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nz-resizable]',
                        providers: [NzResizableService],
                        host: {
                            '[class.nz-resizable]': 'true',
                            '[class.nz-resizable-resizing]': 'resizing',
                            '(mouseenter)': 'onMouseenter()',
                            '(mouseleave)': 'onMouseleave()'
                        }
                    },] }
        ];
        /** @nocollapse */
        NzResizableDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.NgZone },
            { type: NzResizableService },
            { type: platform.Platform }
        ]; };
        NzResizableDirective.propDecorators = {
            nzBounds: [{ type: core.Input }],
            nzMaxHeight: [{ type: core.Input }],
            nzMaxWidth: [{ type: core.Input }],
            nzMinHeight: [{ type: core.Input }],
            nzMinWidth: [{ type: core.Input }],
            nzGridColumnCount: [{ type: core.Input }],
            nzMaxColumn: [{ type: core.Input }],
            nzMinColumn: [{ type: core.Input }],
            nzLockAspectRatio: [{ type: core.Input }],
            nzPreview: [{ type: core.Input }],
            nzResize: [{ type: core.Output }],
            nzResizeEnd: [{ type: core.Output }],
            nzResizeStart: [{ type: core.Output }],
            onMouseup: [{ type: core.HostListener, args: ['document:mouseup', ['$event'],] }],
            onMousemove: [{ type: core.HostListener, args: ['document:mousemove', ['$event'],] }]
        };
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzResizableDirective.prototype, "nzLockAspectRatio", void 0);
        __decorate([
            core$1.InputBoolean(),
            __metadata("design:type", Boolean)
        ], NzResizableDirective.prototype, "nzPreview", void 0);
        return NzResizableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzResizeHandleMouseDownEvent = /** @class */ (function () {
        function NzResizeHandleMouseDownEvent(direction, mouseEvent) {
            this.direction = direction;
            this.mouseEvent = mouseEvent;
        }
        return NzResizeHandleMouseDownEvent;
    }());
    var NzResizeHandleComponent = /** @class */ (function () {
        function NzResizeHandleComponent(nzResizableService, cdr) {
            this.nzResizableService = nzResizableService;
            this.cdr = cdr;
            this.nzDirection = 'bottomRight';
            this.nzMouseDown = new core.EventEmitter();
            this.entered = false;
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        NzResizeHandleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.nzResizableService.mouseEntered$.pipe(operators.takeUntil(this.destroy$)).subscribe((/**
             * @param {?} entered
             * @return {?}
             */
            function (entered) {
                _this.entered = entered;
                _this.cdr.markForCheck();
            }));
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NzResizeHandleComponent.prototype.onMousedown = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.nzResizableService.handleMouseDown$.next(new NzResizeHandleMouseDownEvent(this.nzDirection, $event));
        };
        /**
         * @return {?}
         */
        NzResizeHandleComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        NzResizeHandleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nz-resize-handle, [nz-resize-handle]',
                        template: "<ng-content></ng-content>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class]': '"nz-resizable-handle nz-resizable-handle-" + nzDirection',
                            '[class.nz-resizable-handle-box-hover]': 'entered',
                            '(mousedown)': 'onMousedown($event)'
                        }
                    }] }
        ];
        /** @nocollapse */
        NzResizeHandleComponent.ctorParameters = function () { return [
            { type: NzResizableService },
            { type: core.ChangeDetectorRef }
        ]; };
        NzResizeHandleComponent.propDecorators = {
            nzDirection: [{ type: core.Input }],
            nzMouseDown: [{ type: core.Output }]
        };
        return NzResizeHandleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_RESIZE_DIRECTION = [
        'bottomRight',
        'topRight',
        'bottomLeft',
        'topLeft',
        'bottom',
        'right',
        'top',
        'left'
    ];
    var NzResizeHandlesComponent = /** @class */ (function () {
        function NzResizeHandlesComponent() {
            this.nzDirections = DEFAULT_RESIZE_DIRECTION;
            this.directions = new Set(this.nzDirections);
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NzResizeHandlesComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.nzDirections) {
                this.directions = new Set(changes.nzDirections.currentValue);
            }
        };
        NzResizeHandlesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nz-resize-handles',
                        template: "<nz-resize-handle *ngFor=\"let dir of directions\" [nzDirection]=\"dir\"></nz-resize-handle>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NzResizeHandlesComponent.ctorParameters = function () { return []; };
        NzResizeHandlesComponent.propDecorators = {
            nzDirections: [{ type: core.Input }]
        };
        return NzResizeHandlesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzResizableModule = /** @class */ (function () {
        function NzResizableModule() {
        }
        NzResizableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent],
                        exports: [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent]
                    },] }
        ];
        return NzResizableModule;
    }());

    exports.DEFAULT_RESIZE_DIRECTION = DEFAULT_RESIZE_DIRECTION;
    exports.NzResizableDirective = NzResizableDirective;
    exports.NzResizableModule = NzResizableModule;
    exports.NzResizableService = NzResizableService;
    exports.NzResizeHandleComponent = NzResizeHandleComponent;
    exports.NzResizeHandleMouseDownEvent = NzResizeHandleMouseDownEvent;
    exports.NzResizeHandlesComponent = NzResizeHandlesComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-zorro-antd-resizable.umd.js.map
