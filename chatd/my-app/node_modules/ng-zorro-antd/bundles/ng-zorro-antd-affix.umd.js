(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/common'), require('@angular/core'), require('ng-zorro-antd/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ng-zorro-antd/affix', ['exports', '@angular/cdk/platform', '@angular/common', '@angular/core', 'ng-zorro-antd/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ng-zorro-antd'] = global['ng-zorro-antd'] || {}, global['ng-zorro-antd'].affix = {}), global.ng.cdk.platform, global.ng.common, global.ng.core, global['ng-zorro-antd'].core, global.rxjs, global.rxjs.operators));
}(this, function (exports, platform, common, core, core$1, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NZ_AFFIX_DEFAULT_SCROLL_TIME = 20;
    var NzAffixComponent = /** @class */ (function () {
        function NzAffixComponent(_el, scrollSrv, doc, ngZone, platform) {
            this.scrollSrv = scrollSrv;
            this.doc = doc;
            this.ngZone = ngZone;
            this.platform = platform;
            this.nzChange = new core.EventEmitter();
            this.scroll$ = null;
            this.events = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];
            this.placeholderNode = _el.nativeElement;
        }
        Object.defineProperty(NzAffixComponent.prototype, "nzOffsetTop", {
            get: /**
             * @return {?}
             */
            function () {
                return this._offsetTop;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value === undefined || value === null) {
                    return;
                }
                this._offsetTop = core$1.toNumber(value, null);
                this.updatePosition((/** @type {?} */ ({})));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAffixComponent.prototype, "nzOffsetBottom", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (typeof value === 'undefined') {
                    return;
                }
                this._offsetBottom = core$1.toNumber(value, null);
                this.updatePosition((/** @type {?} */ ({})));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NzAffixComponent.prototype, "target", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var el = this.nzTarget;
                return (typeof el === 'string' ? this.doc.querySelector(el) : el) || window;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NzAffixComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.nzTarget) {
                this.registerListeners();
            }
        };
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.registerListeners();
        };
        /**
         * @return {?}
         */
        NzAffixComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @param {?} element
         * @param {?} target
         * @return {?}
         */
        NzAffixComponent.prototype.getOffset = /**
         * @param {?} element
         * @param {?} target
         * @return {?}
         */
        function (element, target) {
            /** @type {?} */
            var elemRect = element.getBoundingClientRect();
            /** @type {?} */
            var targetRect = this.getTargetRect(target);
            /** @type {?} */
            var scrollTop = this.scrollSrv.getScroll(target, true);
            /** @type {?} */
            var scrollLeft = this.scrollSrv.getScroll(target, false);
            /** @type {?} */
            var docElem = this.doc.body;
            /** @type {?} */
            var clientTop = docElem.clientTop || 0;
            /** @type {?} */
            var clientLeft = docElem.clientLeft || 0;
            return {
                top: elemRect.top - targetRect.top + scrollTop - clientTop,
                left: elemRect.left - targetRect.left + scrollLeft - clientLeft,
                width: elemRect.width,
                height: elemRect.height
            };
        };
        /**
         * @private
         * @return {?}
         */
        NzAffixComponent.prototype.registerListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!platform.supportsScrollBehavior()) {
                return;
            }
            this.removeListeners();
            this.scroll$ = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                return rxjs.merge.apply(void 0, __spread(_this.events.map((/**
                 * @param {?} evName
                 * @return {?}
                 */
                function (evName) { return rxjs.fromEvent(_this.target, evName); })))).pipe(operators.auditTime(NZ_AFFIX_DEFAULT_SCROLL_TIME))
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return _this.updatePosition(e); }));
            }));
            this.timeout = setTimeout((/**
             * @return {?}
             */
            function () { return _this.updatePosition((/** @type {?} */ ({}))); }));
        };
        /**
         * @private
         * @return {?}
         */
        NzAffixComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.scroll$) {
                return;
            }
            clearTimeout(this.timeout);
            this.scroll$.unsubscribe();
        };
        /**
         * @private
         * @param {?} target
         * @return {?}
         */
        NzAffixComponent.prototype.getTargetRect = /**
         * @private
         * @param {?} target
         * @return {?}
         */
        function (target) {
            return target !== window
                ? ((/** @type {?} */ (target))).getBoundingClientRect()
                : ((/** @type {?} */ ({ top: 0, left: 0, bottom: 0 })));
        };
        /**
         * @private
         * @param {?=} affixStyle
         * @return {?}
         */
        NzAffixComponent.prototype.genStyle = /**
         * @private
         * @param {?=} affixStyle
         * @return {?}
         */
        function (affixStyle) {
            if (!affixStyle) {
                return '';
            }
            return Object.keys(affixStyle)
                .map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var val = affixStyle[key];
                return key + ":" + (typeof val === 'string' ? val : val + 'px');
            }))
                .join(';');
        };
        /**
         * @private
         * @param {?} e
         * @param {?=} affixStyle
         * @return {?}
         */
        NzAffixComponent.prototype.setAffixStyle = /**
         * @private
         * @param {?} e
         * @param {?=} affixStyle
         * @return {?}
         */
        function (e, affixStyle) {
            /** @type {?} */
            var originalAffixStyle = this.affixStyle;
            /** @type {?} */
            var isWindow = this.target === window;
            if (e.type === 'scroll' && originalAffixStyle && affixStyle && isWindow) {
                return;
            }
            if (core$1.shallowEqual(originalAffixStyle, affixStyle)) {
                return;
            }
            /** @type {?} */
            var fixed = !!affixStyle;
            /** @type {?} */
            var wrapEl = this.fixedEl.nativeElement;
            wrapEl.style.cssText = this.genStyle(affixStyle);
            this.affixStyle = affixStyle;
            /** @type {?} */
            var cls = 'ant-affix';
            if (fixed) {
                wrapEl.classList.add(cls);
            }
            else {
                wrapEl.classList.remove(cls);
            }
            if ((affixStyle && !originalAffixStyle) || (!affixStyle && originalAffixStyle)) {
                this.nzChange.emit(fixed);
            }
        };
        /**
         * @private
         * @param {?=} placeholderStyle
         * @return {?}
         */
        NzAffixComponent.prototype.setPlaceholderStyle = /**
         * @private
         * @param {?=} placeholderStyle
         * @return {?}
         */
        function (placeholderStyle) {
            /** @type {?} */
            var originalPlaceholderStyle = this.placeholderStyle;
            if (core$1.shallowEqual(placeholderStyle, originalPlaceholderStyle)) {
                return;
            }
            this.placeholderNode.style.cssText = this.genStyle(placeholderStyle);
            this.placeholderStyle = placeholderStyle;
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        NzAffixComponent.prototype.syncPlaceholderStyle = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.affixStyle) {
                return;
            }
            this.placeholderNode.style.cssText = '';
            this.placeholderStyle = undefined;
            /** @type {?} */
            var styleObj = { width: this.placeholderNode.offsetWidth, height: this.fixedEl.nativeElement.offsetHeight };
            this.setAffixStyle(e, __assign({}, this.affixStyle, styleObj));
            this.setPlaceholderStyle(styleObj);
        };
        /**
         * @param {?} e
         * @return {?}
         */
        NzAffixComponent.prototype.updatePosition = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.platform.isBrowser) {
                return;
            }
            /** @type {?} */
            var targetNode = (/** @type {?} */ (this.target));
            // Backwards support
            /** @type {?} */
            var offsetTop = this.nzOffsetTop;
            /** @type {?} */
            var scrollTop = this.scrollSrv.getScroll((/** @type {?} */ (targetNode)), true);
            /** @type {?} */
            var elemOffset = this.getOffset(this.placeholderNode, (/** @type {?} */ (targetNode)));
            /** @type {?} */
            var fixedNode = this.fixedEl.nativeElement;
            /** @type {?} */
            var elemSize = {
                width: fixedNode.offsetWidth,
                height: fixedNode.offsetHeight
            };
            /** @type {?} */
            var offsetMode = {
                top: false,
                bottom: false
            };
            // Default to `offsetTop=0`.
            if (typeof offsetTop !== 'number' && typeof this._offsetBottom !== 'number') {
                offsetMode.top = true;
                offsetTop = 0;
            }
            else {
                offsetMode.top = typeof offsetTop === 'number';
                offsetMode.bottom = typeof this._offsetBottom === 'number';
            }
            /** @type {?} */
            var targetRect = this.getTargetRect((/** @type {?} */ (targetNode)));
            /** @type {?} */
            var targetInnerHeight = ((/** @type {?} */ (targetNode))).innerHeight || ((/** @type {?} */ (targetNode))).clientHeight;
            if (scrollTop >= elemOffset.top - ((/** @type {?} */ (offsetTop))) && offsetMode.top) {
                /** @type {?} */
                var width = elemOffset.width;
                /** @type {?} */
                var top_1 = targetRect.top + ((/** @type {?} */ (offsetTop)));
                this.setAffixStyle(e, {
                    position: 'fixed',
                    top: top_1,
                    left: targetRect.left + elemOffset.left,
                    maxHeight: "calc(100vh - " + top_1 + "px)",
                    width: width
                });
                this.setPlaceholderStyle({
                    width: width,
                    height: elemSize.height
                });
            }
            else if (scrollTop <= elemOffset.top + elemSize.height + ((/** @type {?} */ (this._offsetBottom))) - targetInnerHeight &&
                offsetMode.bottom) {
                /** @type {?} */
                var targetBottomOffet = targetNode === window ? 0 : window.innerHeight - targetRect.bottom;
                /** @type {?} */
                var width = elemOffset.width;
                this.setAffixStyle(e, {
                    position: 'fixed',
                    bottom: targetBottomOffet + ((/** @type {?} */ (this._offsetBottom))),
                    left: targetRect.left + elemOffset.left,
                    width: width
                });
                this.setPlaceholderStyle({
                    width: width,
                    height: elemOffset.height
                });
            }
            else {
                if (e.type === 'resize' &&
                    this.affixStyle &&
                    this.affixStyle.position === 'fixed' &&
                    this.placeholderNode.offsetWidth) {
                    this.setAffixStyle(e, __assign({}, this.affixStyle, { width: this.placeholderNode.offsetWidth }));
                }
                else {
                    this.setAffixStyle(e);
                }
                this.setPlaceholderStyle();
            }
            if (e.type === 'resize') {
                this.syncPlaceholderStyle(e);
            }
        };
        NzAffixComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nz-affix',
                        exportAs: 'nzAffix',
                        template: "<div #fixedEl>\n  <ng-content></ng-content>\n</div>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n      nz-affix {\n        display: block;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NzAffixComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core$1.NzScrollService },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: core.NgZone },
            { type: platform.Platform }
        ]; };
        NzAffixComponent.propDecorators = {
            nzTarget: [{ type: core.Input }],
            nzOffsetTop: [{ type: core.Input }],
            nzOffsetBottom: [{ type: core.Input }],
            nzChange: [{ type: core.Output }],
            fixedEl: [{ type: core.ViewChild, args: ['fixedEl', { static: true },] }]
        };
        return NzAffixComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NzAffixModule = /** @class */ (function () {
        function NzAffixModule() {
        }
        NzAffixModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NzAffixComponent],
                        exports: [NzAffixComponent],
                        imports: [common.CommonModule, platform.PlatformModule],
                        providers: [core$1.SCROLL_SERVICE_PROVIDER]
                    },] }
        ];
        return NzAffixModule;
    }());

    exports.NZ_AFFIX_DEFAULT_SCROLL_TIME = NZ_AFFIX_DEFAULT_SCROLL_TIME;
    exports.NzAffixComponent = NzAffixComponent;
    exports.NzAffixModule = NzAffixModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-zorro-antd-affix.umd.js.map
